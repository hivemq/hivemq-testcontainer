plugins {
    id 'java-library'
    id 'maven-publish'
    id 'com.github.hierynomus.license' version '0.15.0'
}

ext {
    shrinkWrapVersion = '1.2.6'
    junit5Version = '5.6.1'
    extensionSDKVersion = '4.3.0'
    junit4Version = '4.12'
    logbackVersion = '1.2.3'
    daggerVersion = '2.27'
}

version '1.0.0'
group 'com.hivemq'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    mavenLocal()
}

test {
    useJUnitPlatform()
    testLogging.events("failed")
    testLogging.exceptionFormat("full")
}

/* Log stdout for failed tests */
project.test {
    def outputCache = new LinkedList<String>()

    beforeTest { TestDescriptor td -> outputCache.clear() }    // clear everything right before the test starts

    onOutput { TestDescriptor td, TestOutputEvent toe ->       // when output is coming put it in the cache
        outputCache.add(toe.getMessage())
        while (outputCache.size() > 1000) outputCache.remove() // if we have more than 1000 lines -> drop first
    }

    /** after test -> decide what to print */
    afterTest { TestDescriptor td, TestResult tr ->
        if (tr.resultType == TestResult.ResultType.FAILURE && outputCache.size() > 0) {
            println()
            println(" Output of ${td.className}.${td.name}:")
            outputCache.each { print(" > $it") }
        }
    }
}

license {
    header file("${project.rootDir}/HEADER")
    mapping {
        java = "SLASHSTAR_STYLE"
    }
}

dependencies {
    // exported dependencies
    api group: 'org.testcontainers', name: 'testcontainers', version: '1.13.0'
    implementation group: 'commons-io', name: 'commons-io', version: '2.6'
    implementation group: 'org.jboss.shrinkwrap', name: 'shrinkwrap-api', version: shrinkWrapVersion
    implementation group: 'org.jboss.shrinkwrap', name: 'shrinkwrap-impl-base', version: shrinkWrapVersion
    implementation group: 'org.javassist', name: 'javassist', version: '3.27.0-GA'
    implementation group: 'com.hivemq', name: 'hivemq-mqtt-client', version: '1.1.4'

    compileOnly group: 'com.hivemq', name: 'hivemq-extension-sdk', version: extensionSDKVersion
    compileOnly group: 'junit', name: 'junit', version: junit4Version
    compileOnly group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junit5Version
    compileOnly group: 'ch.qos.logback', name: 'logback-classic', version: logbackVersion

    testImplementation group: 'com.hivemq', name: 'hivemq-extension-sdk', version: extensionSDKVersion
    testImplementation group: 'junit', name: 'junit', version: junit4Version
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junit5Version
    testImplementation group: 'ch.qos.logback', name: 'logback-classic', version: logbackVersion
    testImplementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.12'
    testImplementation group: 'com.google.dagger', name: 'dagger', version: '2.27'
    testAnnotationProcessor group: 'com.google.dagger', name: 'dagger-compiler', version: '2.27'

    testRuntime group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junit5Version
    testRuntime group: 'org.junit.vintage', name:'junit-vintage-engine', version: junit5Version
}

task junit5Jar (type: Jar) {
    group 'build'
    from sourceSets.main.output
    exclude("/com/hivemq/testcontainer/junit4")
    archiveAppendix = "junit5"
}

task junit4Jar (type: Jar) {
    group 'build'
    from sourceSets.main.output
    exclude("/com/hivemq/testcontainer/junit5")
    archiveAppendix = "junit4"
}

task coreJar (type: Jar) {
    group 'build'
    from sourceSets.main.output
    exclude("/com/hivemq/testcontainer/junit5", "/com/hivemq/testcontainer/junit4")
    archiveAppendix = "core"
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/hivemq/hivemq-testcontainer")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_PACKAGES_USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_PACKAGES_TOKEN")
            }
        }
    }
    publications {
        core(MavenPublication) {
            artifactId "${project.name}-core"
            artifact coreJar
            pom {
                name = 'HiveMQ Testcontainer Core'
                description = 'Core API for testing HiveMQ Extensions and Java MQTT Applications.'
                url = 'http://www.hivemq.com/'
                developers {
                    developer {
                        id = 'YW'
                        name = 'Yannick Weber'
                        email = 'yannick.weber@hivemq.com'
                        organization = 'HiveMQ GmbH'
                        organizationUrl = 'https://www.hivemq.com'
                    }
                }
            }
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.api.dependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    println 'exporting dependency ' + it.group + ':' + it.name + ':' + it.version + ' as compile to pom.xml'
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                    dependencyNode.appendNode('scope', 'compile')
                }
                configurations.implementation.dependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    println 'exporting dependency ' + it.group + ':' + it.name + ':' + it.version + ' as runtime to pom.xml'
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                    dependencyNode.appendNode('scope', 'runtime')
                }
            }
        }
        junit5(MavenPublication) {
            artifactId "${project.name}-junit5"
            artifact junit5Jar
            pom {
                name = 'HiveMQ Testcontainer JUnit5'
                description = 'JUnit 5 API for testing HiveMQ Extensions and Java MQTT Applications.'
                url = 'http://www.hivemq.com/'
                developers {
                    developer {
                        id = 'YW'
                        name = 'Yannick Weber'
                        email = 'yannick.weber@hivemq.com'
                        organization = 'HiveMQ GmbH'
                        organizationUrl = 'https://www.hivemq.com'
                    }
                }
            }
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.api.dependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    println 'exporting dependency ' + it.group + ':' + it.name + ':' + it.version + ' as compile to pom.xml'
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                    dependencyNode.appendNode('scope', 'compile')
                }
                configurations.implementation.dependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    println 'exporting dependency ' + it.group + ':' + it.name + ':' + it.version + ' as runtime to pom.xml'
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                    dependencyNode.appendNode('scope', 'runtime')
                }
            }
        }
        junit4(MavenPublication) {
            artifactId "${project.name}-junit4"
            artifact junit4Jar
            pom {
                name = 'HiveMQ Testcontainer JUnit4'
                description = 'JUnit 4 API for testing HiveMQ Extensions and Java MQTT Applications.'
                url = 'http://www.hivemq.com/'
                developers {
                    developer {
                        id = 'YW'
                        name = 'Yannick Weber'
                        email = 'yannick.weber@hivemq.com'
                        organization = 'HiveMQ GmbH'
                        organizationUrl = 'https://www.hivemq.com'
                    }
                }
            }
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.api.dependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    println 'exporting dependency ' + it.group + ':' + it.name + ':' + it.version + ' as compile to pom.xml'
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                    dependencyNode.appendNode('scope', 'compile')
                }
                configurations.implementation.dependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    println 'exporting dependency ' + it.group + ':' + it.name + ':' + it.version + ' as runtime to pom.xml'
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                    dependencyNode.appendNode('scope', 'runtime')
                }
            }
        }
    }
}