plugins {
    id 'java-library'
    id 'maven-publish'
}

ext {
    shrinkWrapVersion = '1.2.6'
    junit5Version = '5.6.1'
}

version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    compile group: 'com.hivemq', name: 'hivemq-extension-sdk', version: '4.3.0'
    compile group: 'com.hivemq', name: 'hivemq-mqtt-client', version: '1.1.4'
    compile group: 'junit', name: 'junit', version: '4.12'
    compile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junit5Version

    // exported dependencies
    api group: 'commons-io', name: 'commons-io', version: '2.6'
    api group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.30'
    api group: 'org.jboss.shrinkwrap', name: 'shrinkwrap-api', version: shrinkWrapVersion
    api group: 'org.jboss.shrinkwrap', name: 'shrinkwrap-impl-base', version: shrinkWrapVersion
    api group: 'org.javassist', name: 'javassist', version: '3.27.0-GA'
    api group: 'org.testcontainers', name: 'testcontainers', version: '1.13.0'
    api group: 'com.hivemq', name: 'hivemq-mqtt-client', version: '1.1.4'

    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junit5Version
}

task junit5Jar (type: Jar) {
    group 'build'
    from sourceSets.main.output
    exclude("/com/hivemq/testcontainer/junit4")
    archiveAppendix = "junit5"
}

task junit4Jar (type: Jar) {
    group 'build'
    from sourceSets.main.output
    exclude("/com/hivemq/testcontainer/junit5")
    archiveAppendix = "junit4"
}

task allJar (type: Jar) {
    group 'build'
    from sourceSets.main.output
    archiveAppendix = "all"
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/hivemq/hivemq-testcontainer")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_PACKAGES_USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_PACKAGES_TOKEN")
            }
        }
    }
    publications {
        all(MavenPublication) {
            artifact allJar
            pom {
                name = 'HiveMQ Testcontainer All'
                description = 'API for testing HiveMQ Extensions and Java MQTT Applications.'
                url = 'http://www.hivemq.com/'
                groupId = 'com.hivemq'
                artifactId = 'hivemq-testcontainer-all'
                version = project.version
                developers {
                    developer {
                        id = 'yweber'
                        name = 'Yannick Weber'
                        email = 'yannick.weber@hivemq.com'
                        organization = 'HiveMQ GmbH'
                        organizationUrl = 'https://www.hivemq.com'
                    }
                }
            }
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.api.dependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    println 'exporting dependency ' + it.group + ':' + it.name + ':' + it.version + ' to pom.xml'
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }
        }
        junit5(MavenPublication) {
            artifact junit5Jar
            pom {
                name = 'HiveMQ Testcontainer JUnit5'
                description = 'API for testing HiveMQ Extensions and Java MQTT Applications.'
                url = 'http://www.hivemq.com/'
                groupId = 'com.hivemq'
                artifactId = 'hivemq-testcontainer-junit5'
                version = project.version
                developers {
                    developer {
                        id = 'yweber'
                        name = 'Yannick Weber'
                        email = 'yannick.weber@hivemq.com'
                        organization = 'HiveMQ GmbH'
                        organizationUrl = 'https://www.hivemq.com'
                    }
                }
            }
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.api.dependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    println 'exporting dependency ' + it.group + ':' + it.name + ':' + it.version + ' to pom.xml'
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }
        }
        junit4(MavenPublication) {
            artifact junit4Jar
            groupId = 'com.hivemq'
            artifactId = 'hivemq-testcontainer-junit4'
            version = project.version
            pom {
                name = 'HiveMQ Testcontainer JUnit4'
                description = 'API for testing HiveMQ Extensions and Java MQTT Applications.'
                url = 'http://www.hivemq.com/'
                developers {
                    developer {
                        id = 'yweber'
                        name = 'Yannick Weber'
                        email = 'yannick.weber@hivemq.com'
                        organization = 'HiveMQ GmbH'
                        organizationUrl = 'https://www.hivemq.com'
                    }
                }
            }
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.compile.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    println 'exporting dependency ' + it.group + ':' + it.name + ':' + it.version + ' to pom.xml'
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }
        }
    }
}