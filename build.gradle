plugins {
    id 'com.github.hierynomus.license' version '0.15.0' apply false
}

/* ******************** metadata ******************** */

allprojects {
    version '1.3.2'
    group 'com.hivemq'
    description 'Testcontainers for testing HiveMQ Extensions and Java MQTT Applications.'

    ext {
        readableName = 'HiveMQ Testcontainer'
        githubOrg = 'hivemq'
        githubRepo = 'hivemq-testcontainer'
        githubUrl = 'https://github.com/' + githubOrg + '/' + githubRepo
        scmConnection = 'scm:git:git://github.com/' + githubOrg + '/' + githubRepo + '.git'
        scmDeveloperConnection = 'scm:git:ssh://git@github.com/' + githubOrg + '/' + githubRepo + '.git'
        issuesUrl = githubUrl + '/issues'
        licenseShortName = 'Apache-2.0'
        licenseReadableName = 'The Apache License, Version 2.0'
        licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    }
}


/* ******************** java ******************** */

allprojects {
    plugins.withType(JavaPlugin) {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8

        tasks.withType(JavaCompile) {
            options.encoding = 'UTF-8'
        }
    }
}


/* ******************** dependencies ******************** */

allprojects {
    repositories {
        mavenCentral()
    }

    ext {
        testContainersVersion = '1.15.2'
        extensionSDKVersion = '4.4.4'
        hmcVersion = '1.2.1'
        junit4Version = '4.13.1'
        junit5Version = '5.7.0'
        jetbrainsAnnotationsVersion = '20.1.0'
        commonsIoVersion = '2.8.0'
        commonsLangVersion = '3.11'
        javassistVersion = '3.27.0-GA'
        shrinkWrapVersion = '1.2.6'
        shrinkwrapResolverDepchainVersion = '3.1.4'
        zip4jVersion = '2.6.4'
        guavaVersion = '30.1-jre'

        // only test
        httpClientVersion = '4.5.13'
        logbackVersion = '1.2.3'
    }
}


/* ******************** test ******************** */

allprojects {
    plugins.withType(JavaPlugin) {
        dependencies {
            testImplementation group: 'junit', name: 'junit', version: junit4Version
            testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junit5Version

            testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junit5Version
            testRuntimeOnly group: 'org.junit.vintage', name: 'junit-vintage-engine', version: junit5Version
        }

        test {
            useJUnitPlatform()
            testLogging.events('failed', 'passed')
            testLogging.exceptionFormat('full')

            /* Log stdout for failed tests */
            def outputCache = new LinkedList<String>()

            beforeTest { TestDescriptor td -> outputCache.clear() }    // clear everything right before the test starts

            onOutput { TestDescriptor td, TestOutputEvent toe ->       // when output is coming put it in the cache
                outputCache.add(toe.getMessage())
                while (outputCache.size() > 1000) outputCache.remove() // if we have more than 1000 lines -> drop first
            }

            /** after test -> decide what to print */
            afterTest { TestDescriptor td, TestResult tr ->
                if (tr.resultType == TestResult.ResultType.FAILURE && outputCache.size() > 0) {
                    println()
                    println(" Output of ${td.className}.${td.name}:")
                    outputCache.each { print(" > $it") }
                }
            }
        }
    }
}


/* ******************** jars ******************** */

allprojects {
    plugins.withType(JavaLibraryPlugin) {
        javadoc {
            options.encoding 'UTF-8'
            exclude '**/internal/**'
        }

        task javadocJar(type: Jar) {
            group 'documentation'
            description 'Assembles a jar archive containing the javadoc.'

            from tasks.javadoc
            classifier 'javadoc'
        }

        task sourcesJar(type: Jar) {
            group 'build'
            description 'Assembles a jar archive containing the main sources.'

            from sourceSets.main.allSource
            classifier 'sources'
        }
    }
}


/* ******************** publishing ******************** */

allprojects {
    project.apply plugin: 'maven'
    project.apply plugin: 'signing'

    uploadArchives {
        repositories {
            mavenDeployer {

                def ossrhUsername = project.findProperty('sonatypeUsername') ?: System.getenv('SONATYPE_USERNAME')
                def ossrhPassword = project.findProperty('sonatypePassword') ?: System.getenv('SONATYPE_PASSWORD')

                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project {
                    name = project.readableName
                    description = project.description
                    url = project.githubUrl
                    licenses {
                        license {
                            name = project.licenseReadableName
                            url = project.licenseUrl
                        }
                    }
                    developers {
                        developer {
                            id = 'YW'
                            name = 'Yannick Weber'
                            email = 'yannick.weber@hivemq.com'
                            organization = 'HiveMQ GmbH'
                            organizationUrl = 'https://www.hivemq.com'
                        }
                    }
                    scm {
                        connection = project.scmConnection
                        developerConnection = project.scmDeveloperConnection
                        url = project.githubUrl
                    }
                }
            }
        }
    }

    signing {
        String signingKey = project.findProperty('signKey') ?: System.getenv('SIGN_KEY')
        String signingPassword = project.findProperty('signKeyPass') ?: System.getenv('SIGN_KEY_PASS')
        if (signingKey && signingPassword) {
            useInMemoryPgpKeys(signingKey, signingPassword)
        }
    }
}


/* ******************** checks ******************** */

allprojects {
    apply plugin: 'com.github.hierynomus.license'

    license {
        header file("${project.rootDir}/HEADER")
        mapping {
            java = 'SLASHSTAR_STYLE'
        }
    }
}